version: '3.9'

services:
  # Shell Config
  shell:
    # Name des Containers
    container_name: ${COMPOSE_PROJECT_NAME}_shell

    # Hostname
    hostname: "${COMPOSE_PROJECT_NAME}-shell"

    # Build-File
    build:
      context: ./shell
      args:
        SHELL_USER_SSHKEY: ${SHELL_USER_SSHKEY}
        PHP_VERSION: ${PHP_VERSION}
        GIT_EMAIL: ${GIT_EMAIL}
        GIT_USER: ${GIT_USER}
    
    # Verzeichnisse verknüpfen
    volumes:
      - project-volume:/var/projects

    # Portmapping
    ports:
      - "${SHELL_SSH_PORT}:22"


  # Nginx Config
  nginx:
    # Name des Containers
    container_name: ${COMPOSE_PROJECT_NAME}_nginx

    # Build-File
    build:
      context: ./nginx
      args:
        NGINX_VERSION: ${NGINX_VERSION}
    
    # Verzeichnisse verknüpfen
    volumes:
      # Projekte
      - project-volume:/var/projects
      # Configs
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites/:/etc/nginx/sites-available
      - ./nginx/conf.d/:/etc/nginx/conf.d

    # php-fpm Container muss vorhanden sein
    depends_on:
      - php-fpm
        
    # Portmapping
    ports:
      - "${NGINX_PORT}:80"      
  
  # PHP-FPM Config
  php-fpm:
    # Name des Containers
    container_name: ${COMPOSE_PROJECT_NAME}_php-fpm

    # Build-File
    build:
      context: ./php-fpm
      args:
        PHP_VERSION: ${PHP_VERSION}

    # Verzeichnisse verknüpfen
    volumes:
      # Muss das gleiche Mapping sein wie bei nginx!
      - project-volume:/var/projects  

  # MySQL Config
  mysql:
    # Name des Containers
    container_name: ${COMPOSE_PROJECT_NAME}_mysql

    # Direktes Image anstatt Dockerfile
    image: mariadb:${MARIADB_VERSION}

    # Ports
    ports:
      - "${MYSQL_PORT}:3306"

    # Configs
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASS}

    # Daten- und Log-Verzeichnis außerhalb des Containers festlegen
    volumes:
      # Lib
      - ./var/mysql-${MARIADB_VERSION}/lib:/var/lib/mysql/
      # Logs
      - ./var/mysql-${MARIADB_VERSION}/log:/var/log/mysql/

      
# Volumes definieren
volumes:
  project-volume:
    name: ${PROJECT_VOLUME}